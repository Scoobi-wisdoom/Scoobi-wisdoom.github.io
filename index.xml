<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>wisdoom</title>
    <link>https://Scoobi-wisdoom.github.io/</link>
    <description>Recent content on wisdoom</description>
    <generator>Hugo -- 0.139.4</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 10 Dec 2024 20:43:47 +0900</lastBuildDate>
    <atom:link href="https://Scoobi-wisdoom.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>@Transcational 과 Rollback</title>
      <link>https://Scoobi-wisdoom.github.io/posts/transactional%EA%B3%BC-rollback/</link>
      <pubDate>Tue, 10 Dec 2024 20:43:47 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/transactional%EA%B3%BC-rollback/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://techblog.woowahan.com/2606/&#34;&gt;우아한 기술블로그&lt;/a&gt;에서 설명하지 않은 부분이 헷갈려서 이 글을 쓰게 됐다. 위의 블로그를 읽고 생각하게 된 것은, &amp;ldquo;RuntimeException 이 발생하면 무조건 rollback 이 발생한다.&amp;rdquo; 였다. 하지만 이는 사실이 아니었다.&lt;/p&gt;
&lt;p&gt;결론을 먼저 말하자면 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Transactional&lt;/code&gt; 이 붙은 함수가 완료되기 전에 catch Exception 이 있으면 롤백은 일어나지 않는다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@Transactional&lt;/code&gt; 이 붙은 함수가 완료된 후에 catch Exception 이 있으면 롤백이 일어난다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;결론-도출을-위한-코드&#34;&gt;결론 도출을 위한 코드&lt;/h2&gt;
&lt;p&gt;테스트를 위해 아래와 같이 kotlin 코드를 작성했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Transactional&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;OuterService&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; memberRepository: MemberRepository,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; innerService: InnerService,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryCatchAndThrow&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            memberRepository.save(Member())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; RuntimeException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Outer: intentionally thrown&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (e: RuntimeException) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            println(e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;outerTryCatchAndInnerThrow&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            innerService.`throw`()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (e: RuntimeException) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            println(e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;innerTryCatchAndInnerThrow&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        innerService.tryCatchAndThrow()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Transactional&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;InnerService&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; memberRepository: MemberRepository,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;`throw`&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        memberRepository.save(Member())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; RuntimeException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inner: intentionally thrown&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;tryCatchAndThrow&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;try&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            memberRepository.save(Member())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;throw&lt;/span&gt; RuntimeException(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Inner: intentionally thrown&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        } &lt;span style=&#34;color:#66d9ef&#34;&gt;catch&lt;/span&gt; (e: Exception) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            println(e)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;InnerService 를 참조하는 클래스는 OuterSerivce 뿐이라고 가정하고 OuterService 에 대해 아래와 같이 테스트 코드를 작성했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS 이것만 외우자</title>
      <link>https://Scoobi-wisdoom.github.io/posts/aws-%EC%9D%B4%EA%B2%83%EB%A7%8C-%EC%99%B8%EC%9A%B0%EC%9E%90/</link>
      <pubDate>Sat, 09 Mar 2024 19:13:35 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/aws-%EC%9D%B4%EA%B2%83%EB%A7%8C-%EC%99%B8%EC%9A%B0%EC%9E%90/</guid>
      <description>&lt;h1 id=&#34;로컬-vs-클라우드-차이-networking&#34;&gt;로컬 vs 클라우드 차이: Networking&lt;/h1&gt;
&lt;p&gt;백엔드 개발을 처음 배울 때, Hello World 를 출력하는 앱을 만들어본다. 예를 들어, 아래와 같이 요청에 대해 &amp;ldquo;Hello World&amp;rdquo; 를 응답하는 것이다 (Spring Boot 사용).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;DemoController&lt;/span&gt; { 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getDemo&lt;/span&gt;() = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 애플리케이션을 로컬 컴퓨터에서 구동한 후, 로컬 브라우저에서 &lt;code&gt;localhost:8080&lt;/code&gt; 을 입력해 Hello World 를 브라우저 화면에서 확인할 수 있다. 애플리케이션을 AWS 에서 구동하는 것 역시 이와 거의 동일하다. 로컬 환경이 클라우드 환경으로 변한 것뿐이다. 아래 그림처럼 말이다.
&lt;img alt=&#34;local vs cloud&#34; loading=&#34;lazy&#34; src=&#34;https://Scoobi-wisdoom.github.io/images/was_in_cloud/was_in_cloud_03.jpg&#34;&gt;
그림에서 로컬 환경과 클라우드 환경을 비교해보면 크게 두 가지가 다르다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin Coroutines</title>
      <link>https://Scoobi-wisdoom.github.io/posts/kotlin-coroutines/</link>
      <pubDate>Tue, 26 Sep 2023 00:41:11 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/kotlin-coroutines/</guid>
      <description>&lt;h1 id=&#34;왜-coroutine-을-사용해야-할까&#34;&gt;왜 coroutine 을 사용해야 할까?&lt;/h1&gt;
&lt;p&gt;Kotlin coroutine 은 효율적으로 thread 를 사용하고, 프로그래머가 편하고, 퍼포먼스가 좋다.&lt;/p&gt;
&lt;h2 id=&#34;효율적으로-thread-를-사용한다&#34;&gt;효율적으로 thread 를 사용한다&lt;/h2&gt;
&lt;p&gt;Thread 를 생성하는 데에는 큰 비용이 든다. 그런데 Coroutine 를 사용하기 위해 추가적인 &lt;strong&gt;thread 생성이 필요 없다&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;또한 coroutine 은 non-blocking 이다. 즉, coroutine 이 완료될 때까지 thread 가 멈춰있지 않고 다른 작업을 처리할 수 있다. 아래 예시를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;showOrderInfo&lt;/span&gt;(details: Details) = async {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; orderId = orderProduct(details).await()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; orderData = loadOrderData(orderId).await()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    showData(orderData)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 예시에서 &lt;code&gt;orderProduct()&lt;/code&gt; 와 &lt;code&gt;loadOrderData()&lt;/code&gt; 는 suspend fun 로서, non-blocking 이다. 덕분에 thread 는 &lt;code&gt;showOrderInfo()&lt;/code&gt; 함수 말고도 다른 작업을 할 수 있다. 만약 &lt;code&gt;orderProduct()&lt;/code&gt; 와 &lt;code&gt;loadOrderData()&lt;/code&gt; 가 blocking 이라면, thread 는 두 함수가 완료될 때까지 다른 작업을 할 수 없다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JPA: 단뱡향 @ManyToOne만 써라</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jpa-direction-of-onetomany/</link>
      <pubDate>Sun, 19 Mar 2023 21:29:21 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/jpa-direction-of-onetomany/</guid>
      <description>&lt;p&gt;자극적인 제목 미안하다. 물론 장단점이 있을 수 있다. 하지만 글의 결론부터 말하자면, 단방향 (unidirectional) &lt;code&gt;@OneToMany&lt;/code&gt;보다는 양방향 (bidirectional) &lt;code&gt;@OneToMany&lt;/code&gt;가 좋고, 양방향 &lt;code&gt;@OneToMany&lt;/code&gt;보다는 단방향 &lt;code&gt;@ManyToOne&lt;/code&gt;이 좋다.&lt;/p&gt;
&lt;h1 id=&#34;onetomany를-사용한다면-무조건-양방향이-좋다&#34;&gt;&lt;code&gt;@OneToMany&lt;/code&gt;를 사용한다면 무조건 양방향이 좋다.&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Spring Boot Persistence Best Practices&lt;/em&gt; 책의 저자는 &lt;code&gt;@OneToMany&lt;/code&gt;가 단방향으로 설정됐을 때 얼마나 안 좋은지를 서술한다.&lt;/p&gt;
&lt;p&gt;JPA 에서 엔티티 관계를 양방향으로 설정할 경우 귀찮은 일이 생긴다.
그렇기 때문에 단방향으로 설정하는 경우가 있다.&lt;/p&gt;
&lt;p&gt;하지만 &lt;code&gt;@OneToMany&lt;/code&gt;는 단방향을 선택하면 안 된다. &lt;strong&gt;비효율적인 쿼리가 발생&lt;/strong&gt;하기 때문이다.
여기서는 실험을 통해 이를 확인한다. &lt;em&gt;Spring Boot Persistence Best Practices&lt;/em&gt; 책의 예제를 재구성해 실험했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>특정 커밋만 제외하고 모두 git merge</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%ED%8A%B9%EC%A0%95-%EC%BB%A4%EB%B0%8B%EB%A7%8C-%EC%A0%9C%EC%99%B8%ED%95%98%EA%B3%A0-%EB%AA%A8%EB%91%90-git-merge/</link>
      <pubDate>Sun, 04 Dec 2022 22:59:12 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/%ED%8A%B9%EC%A0%95-%EC%BB%A4%EB%B0%8B%EB%A7%8C-%EC%A0%9C%EC%99%B8%ED%95%98%EA%B3%A0-%EB%AA%A8%EB%91%90-git-merge/</guid>
      <description>&lt;p&gt;Develop 브랜치의 여러 개의 커밋 중 특정 커밋만 제외하고 나머지를 모두 master 브랜치에 merge하는 방법이 없을까?&lt;/p&gt;
&lt;h2 id=&#34;상황&#34;&gt;상황&lt;/h2&gt;
&lt;p&gt;먼저 이런 상황은 어떤 때 발생할까? 실제로 겪은 상황으로, 세부 사항은 아래와 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Develop 브랜치의 총 다섯 개 커밋 중 두 번째, 세 번째 커밋만 테스트가 완료되지 않았다.&lt;/li&gt;
&lt;li&gt;나머지 커밋은 당장 master에 merge 후 deploy해야 한다.&lt;/li&gt;
&lt;li&gt;언제든 테스트가 완료되면, 두 번째 및 세 번째 커밋도 master에 merge해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;해결-방법-cherry-pick&#34;&gt;해결 방법: cherry pick&lt;/h2&gt;
&lt;p&gt;Develop 브랜치의 commit log는 아래와 같다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hibernate가 무슨 쿼리를 만드는지 눈으로 확인하지 말자</title>
      <link>https://Scoobi-wisdoom.github.io/posts/hibernate%EA%B0%80-%EB%AC%B4%EC%8A%A8-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94%EC%A7%80-%EB%88%88%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90/</link>
      <pubDate>Wed, 31 Aug 2022 00:11:17 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/hibernate%EA%B0%80-%EB%AC%B4%EC%8A%A8-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94%EC%A7%80-%EB%88%88%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90/</guid>
      <description>&lt;p&gt;JPA hibernate는 편리하지만 때로 치명적이다. 의도하지 않은 여러 쿼리가 실행돼 db에 부하가 걸리거나, 영속성 컨텍스트와 실제 db 데이터가 다를 수 있는 등의 문제가 발생할 수 있기 때문이다. 여기서는 첫 번째 문제를 보완할 수 있는 방법을 소개한다.&lt;/p&gt;
&lt;p&gt;Hibernate가 어떤 쿼리를 생성하는지 보통은 눈으로 확인한다. 아래와 같은 로그를 보고 말이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[    Test worker] org.hibernate.SQL                        : select book0_.id as id1_0_0_ from book book0_ where book0_.id=?
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;[    Test worker] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [BIGINT] - [0]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;로그를 눈으로 보면 &lt;code&gt;select&lt;/code&gt; 쿼리가 한 번 발생하는 것을 확인할 수 있다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interface vs Abstract Class</title>
      <link>https://Scoobi-wisdoom.github.io/posts/interface-vs-abstract-class/</link>
      <pubDate>Sun, 07 Aug 2022 16:44:53 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/interface-vs-abstract-class/</guid>
      <description>&lt;p&gt;Interface와 abstract class의 차이를 알아보자.&lt;/p&gt;
&lt;p&gt;Java 8부터 interface에는 default method가 생겼다. 이로 인해 interface와 abstract class의 차이가 하나 줄었다.&lt;/p&gt;
&lt;p&gt;Interface와 abstract class의 차이는 크게 두 가지다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract class는 interface와 달리 다중 상속의 대상이 될 수 없다.&lt;/li&gt;
&lt;li&gt;Abstract class는 state를 가질 수 있지만 interface는 state를 가질 수 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이외에도 lambda expression과 관련한 차이도 있다. 하지만 여기서는 다루지 않는다. 위에 명시한 두 가지 차이에 대해서 알아보자.&lt;/p&gt;
&lt;h2 id=&#34;다중-상속&#34;&gt;다중 상속&lt;/h2&gt;
&lt;p&gt;Effective Java를 보면 abstract class보다는 interface를 사용하라고 한다. 여러 이유가 있는데 그 중 위에서 언급한 첫 번째 이유가 있다. Abstract class 다중 상속의 대상이 될 수 없다. 결국, abstract class는 hierarchy와 관련된다. 하지만 hierarchy가 부적절한 경우가 많다. 예를 들어 &lt;code&gt;interface Husband&lt;/code&gt;와 &lt;code&gt;interface Son&lt;/code&gt;을 조합해 &lt;code&gt;class MarriedMan&lt;/code&gt;을 정의할 수 있다. MarriedMan은 Husband이면서 Son이다. Hierarchy로 이 셋의 관계를 정의하는 건 부적절하다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Garbage Collection</title>
      <link>https://Scoobi-wisdoom.github.io/posts/garbage-collection/</link>
      <pubDate>Sun, 10 Jul 2022 21:57:35 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/garbage-collection/</guid>
      <description>&lt;p&gt;자바 메모리 관리에 대해 알아보자.&lt;/p&gt;
&lt;p&gt;메모리 관리란 새로운 object를 메모리에 할당하고, 오래된 object를 메모리에서 제거하는 과정을 말한다.&lt;/p&gt;
&lt;h2 id=&#34;garbage-collection&#34;&gt;Garbage Collection&lt;/h2&gt;
&lt;p&gt;Garbage Collection이란 objects를 할당하기 위해 heap 또는 nursery 공간을 확보하는 과정을 말한다. Java에서는 사용자가 직접 메모리를 통제하는 게 아니라 JVM의 Garbage Collector가 한다. 물론 예외적으로 Reference variable에 null을 할당하거나, &lt;code&gt;System.gc()&lt;/code&gt; 메서드를 호출하는 방법이 있다. 후자는 시스템 성능에 예기치 못한 영향을 미칠 수 있으니 사용하면 안 된다.&lt;/p&gt;
&lt;p&gt;Java objects는 heap에 위치한다. Heap이 생성되는 시점은 JVM이 시작될 때이며, heap의 사이즈는 애플리케이션이 구동하면서 증감한다. Heap이 가득차면 garbage collection(gc)이 일어난다. 사용하지 않는 objects는 gc를 통해서 삭제되고, 이를 통해 새로운 objects를 할당할 수 있는 공간을 메모리에 확보한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>백엔드 프레임워크와 UTF Encoding</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%99%80-utf-encoding/</link>
      <pubDate>Tue, 07 Jun 2022 00:19:22 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%99%80-utf-encoding/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://www.inflearn.com/course/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EA%B0%9C%EC%A0%95%ED%8C%90/lecture/88662?tab=curriculum&amp;amp;volume=1.00&#34;&gt;백엔드 프레임워크 만들기 (개정판), 제로 - 인프런&lt;/a&gt; 에서 배운 내용을 정리한다.
컴퓨터를 사용하다 보면 아래와 같이 알 수 없는 문자를 본 적이 한 번쯤은 있다. 한글이 깨졌다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;궢귛귍귪궻귺긏긘깈깛
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런 난감한 상황을 막으려면 character set 기준을 정해야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Character set: 사람의 문자 문자열을 컴퓨터의 문자 비트열로 저장하기 위한 규칙.&lt;br&gt;
Encoding: 문자열과 비트열간 변환 작업.&lt;br&gt;
Decoding: Encoding된 대상을 원본으로 되돌리는 작업을 의미한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Character set에 맞춰 어떻게 encoding/decoding 할지 결정한다.&lt;/p&gt;
&lt;p&gt;character set에 맞지 않게 인코딩되면 데이터를 해석할 수 없다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>네트워크 상식</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%81%EC%8B%9D/</link>
      <pubDate>Mon, 23 May 2022 22:48:14 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%81%EC%8B%9D/</guid>
      <description>&lt;h1 id=&#34;개발자에게-필요한-네트워크-상식&#34;&gt;개발자에게 필요한 네트워크 상식&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.inflearn.com/course/%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EA%B0%9C%EC%A0%95%ED%8C%90/lecture/88650&#34;&gt;백엔드 프레임워크 만들기 (개정판), 제로 - 인프런&lt;/a&gt; 에서 배운 내용을 정리한다.&lt;/p&gt;
&lt;p&gt;개발자라면 다음과 같은 문제에 대답할 수 있어야 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;private IP 주소를 사용하는 외부 서버에 접속할 수 있는 방법 &lt;br&gt;
웹 브라우저의 MAC 주소를 알 수 있는 방법 &lt;br&gt;
IP 주소를 사용자 식별자로 사용할 수 있는 방법 &lt;br&gt;
80 포트를 사용하는 톰캣을 여러 개 실행할 수 있는 방법&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;나는 첫 두 개는 모르고 있었다. 갈 길이 멀다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;h5 id=&#34;private-ip-주소를-사용하는-외부-서버에-접속할-수-있는-방법-public-ip-주소를-할당받아야-함&#34;&gt;private IP 주소를 사용하는 외부 서버에 접속할 수 있는 방법: public IP 주소를 할당받아야 함.&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;public IP 주소를 할당받아 DMZ 영역에 서버를 구성&lt;/li&gt;
&lt;li&gt;public IP 주소를 할당받아 STUN, TURN 등 기술을 사용&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;웹-브라우저의-mac-주소를-알-수-있는-방법&#34;&gt;웹 브라우저의 MAC 주소를 알 수 있는 방법&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;사용자의 MAC 주소를 알 방법은 없음&lt;/li&gt;
&lt;li&gt;별도의 프로그램으로 수집할 수 있지만 개인정보 침해 소지가 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;아이피-주소를-사용자-식별자로-사용하는-방법&#34;&gt;아이피 주소를 사용자 식별자로 사용하는 방법&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;논리적 아이피 주소는 환경에 따라 변경가능하기 때문에 식별자로 사용할 수 없음.&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;80-포트를-사용하는-톰캣을-여러-개-실행할-수-있는-방법&#34;&gt;80 포트를 사용하는 톰캣을 여러 개 실행할 수 있는 방법&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;포트는 운영체제에서 실행되는 프로세스를 식별할 수 있는 key 로서, 동시에 여러 개 실행하는 것은 불가능&lt;/li&gt;
&lt;li&gt;하나의 컴퓨터에 여러 개 가상화 환경을 준비하고 실행하는 방법은 있음.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;이제 왜 위와 같은 결론이 나오는지 알아보자.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Abstract Class</title>
      <link>https://Scoobi-wisdoom.github.io/posts/abstract-class/</link>
      <pubDate>Wed, 16 Mar 2022 00:16:44 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/abstract-class/</guid>
      <description>&lt;p&gt;Spring 은 IoC container 에 bean 객체를 생성한 후 그 객체를 등록한 후, 필요할 때 사용한다.
Interface 는 객체를 생성할 수 없기 때문에 bean 이 될 수 없다.&lt;/p&gt;
&lt;p&gt;그렇다면 Abstract Class 는 어떨까? 아래 코드를 보면 일단 bean 으로 등록할 수 없다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@RestController&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Controller&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; abstractService: AbstractService,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@GetMapping&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;/abstract&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getAbstract&lt;/span&gt;() = abstractService.abstractFunction()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;@Service&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AbstractService&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;abstractFunction&lt;/span&gt;() = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;아래와 같은 메시지가 뜨면서 애플리케이션이 멈춘다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;***************************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;APPLICATION FAILED TO START
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;***************************
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Description:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&lt;/span&gt;Parameter 0 of constructor in com.demo.controller.Controller required a bean of type &amp;#39;com.demo.service.AbstractService&amp;#39; that could not be found.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;왜 그럴까? 필자에게 하나의 가설이 있었다. Abstract Class 의 메서드 역시 abstract method 다. Child Class 가 어떻게 구현하느냐에 따라 달라지기 때문에 Abstract Class 는 bean 으로 등록할 수 없다. 그렇다면, Abstract Class 의 모든 메서드가 final method 라면 bean 으로 등록할 수 있을까? 그래서 아래와 같이 구현을 한 후 애플리케이션을 run 했다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jackson Mapper 는 가끔 위험하다</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jackson-mapper-%EB%8A%94-%EA%B0%80%EB%81%94-%EC%9C%84%ED%97%98%ED%95%98%EB%8B%A4/</link>
      <pubDate>Wed, 27 Oct 2021 22:51:13 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/jackson-mapper-%EB%8A%94-%EA%B0%80%EB%81%94-%EC%9C%84%ED%97%98%ED%95%98%EB%8B%A4/</guid>
      <description>&lt;h3 id=&#34;null-로-설정된-값을-jackson-mapper-가-멋대로-변경하는-현상-java-primitives&#34;&gt;null 로 설정된 값을 Jackson mapper 가 멋대로 변경하는 현상: Java Primitives&lt;/h3&gt;
&lt;p&gt;Kotlin 스프링 부트를 사용해 API 를 작성 중에 예상치 못한 에러를 경험했다.&lt;/p&gt;
&lt;p&gt;아래의 RequestBody class 를 보면 알 수 있듯이 blocked 는 not nullable 이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RequestBody data class&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ReqBody&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; demoId: String,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; demoName: String,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; openDate: LocalDate?,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; blocked: Boolean
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;json 으로 request 를 보낼 때, 아래와 같이 보내면 어떻게 될까?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;json 형태의 request&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;demoId&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo1&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;demoName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;demo name&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;openDate&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2021-10-22&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;not nullable 인 blocked 를 null 로 보내기 때문에, BAD REQUEST 에러가 발생할 것으로 예상한다. 하지만 그렇지 않고 아래와 같이 blocked 는 false 값을 할당받았다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jpa 정리 Ch9 (2)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-2/</link>
      <pubDate>Tue, 12 Oct 2021 01:27:12 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-2/</guid>
      <description>&lt;p&gt;무슨 이유에서인지 QueryDSL 의 쿼리 결과를 list() 로도, unique() 로도 반환할 수 없다. 원인을 파악해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;querydsl&#34;&gt;QueryDSL&lt;/h3&gt;
&lt;p&gt;QueryDSL 환경 설정을 위해 build.gradle.kts 파일에 설정을 추가한다. 추가하는 설정은 이 글 맨 아래에서 확인할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;설정-파일&#34;&gt;설정 파일&lt;/h2&gt;
&lt;p&gt;persistence.xml&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- xml 네임스페이스와 사용할 버전을 지정한다. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- jpa 2.1 을 사용하려면 여기에 xmlns 와 2.1 을 쓰면 된다. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;persistence&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://xmlns.jcp.org/xml/ns/persistence&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;2.2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 영속성 유닛. 일반적으로 연결할 데이터베이스당 하나의 영속성 유닛을 등록한다. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 그리고 영속성 이름에는 고유한 이름을 부여해야 한다. 여기서는 jpabook. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;persistence-unit&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jpabook&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- @Entity 애너테이션이 들어가는 클래스 목록 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;class&amp;gt;&lt;/span&gt;com.wisdoom.Member&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;class&amp;gt;&lt;/span&gt;com.wisdoom.Team&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 필수 속성 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- name 이 javax.persistence 로 시작하는 속성은 JPA 표준 속성으로 특정 구현체에 종속되지 않는다. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javax.persistence.jdbc.driver&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.h2.Driver&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javax.persistence.jdbc.user&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javax.persistence.jdbc.password&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;javax.persistence.jdbc.url&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;jdbc:h2:tcp://localhost/~/test&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 특정 데이터베이스를 활용하기 위해 사용. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernate.dialect&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;org.hibernate.dialect.H2Dialect&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 옵션 --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- DDL 을 콘솔에 출력한다. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernate.show_sql&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 애플리케이션 실행 시점에 데이터베이스 테이블을 자동으로 생성한다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            create: 기존 테이블 삭제 후 생성; create-drop: create 속성과 동일하나, create 한 내용을 애플리케이션 종료 시에 DROP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            update: 데이터베이스 테이블과 엔티티 매핑 정보를 비교해 변경 사항만 수정
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            validate: 데이터베이스 테이블과 엔티티 매핑 저보를 비교했을 때 차이가 있으면 경고를 남기고 애플리케이션을 실행하지 않는다.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;            --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--             &amp;lt;property name=&amp;#34;hibernate.hbm2ddl.auto&amp;#34; value=&amp;#34;create&amp;#34;/&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--???? 기본 키 생성 전략을 사용하기 위한 설정 ????--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernate.id.new_generator_mappings&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 실제로 실행되는 sql query 를 다이얼로그에 출력한다 true. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernate.use_sql_comments&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- 실제로 실행되는 sql query 를 사람이 보기 좋게 출력한다 true. 보기 좋게 출력하지 않는다 false. --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hibernate.format_sql&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!--&amp;lt;property name=&amp;#34;hibernate.hbm2ddl.auto&amp;#34; value=&amp;#34;create&amp;#34; /&amp;gt;--&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/properties&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/persistence-unit&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;/persistence&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;build.gradle.kts&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jpa 정리 Ch9 (1)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-1/</link>
      <pubDate>Mon, 27 Sep 2021 22:15:56 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-1/</guid>
      <description>&lt;p&gt;의문점:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JPQL 의 여러 값 projection 을 할 때, [Ljava.lang.Object 로 resultList 가 보이는데, 이걸 사람이 알아볼 수 있게 만드는 방법이 없을까? DTO 를 만들어서 TypedQuery&amp;lt;DTO&amp;gt; 로 해결하는 것으로 보인다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 글은 책(김영한, 자바 orm 표준 jpa 프로그래밍, 에이콘, 2019) 의 내용을 정리한 것임을 밝힌다.&lt;/p&gt;
&lt;h2 id=&#34;값-타입&#34;&gt;값 타입&lt;/h2&gt;
&lt;p&gt;JPA 의 데이터 타입은 엔티티 타입과 값 타입으로 나뉜다. 엔티티 타입의 객체는 @Entity 로 정의되는 객체로 JPA 에서 식별자와 생명주기를 가져 &lt;strong&gt;영속성 컨텍스트에서 관리&lt;/strong&gt;되지만, 값 타입은 state로서 실별자도 생명주기도 없는 것으로서 기본값 타입(basic value type), 임베디드 타입(embedded type), 컬렉션 값 타입(collection value type) 으로 나뉜다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>클래스의 프로퍼티를 Map으로 변환하기</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-map%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 13 Sep 2021 23:27:26 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-map%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</guid>
      <description>&lt;p&gt;코틀린 class 의 properties 개수가 많고, 이의 fields 가 반복되는 규칙의 이름을 가진 경우, objectMapper 를 통해 쉽게 값을 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;어떤 경우에 이런 기능이 필요할까? 필자가 개발하다 보니, 인수인계 받은 코드의 item class 의 프로퍼티가 매우 많았다. item01 ~ item35 까지 있었다. 이렇게 되면 한 눈에 클래스를 파악하기도 힘들었다. 설상가상으로, item class 는 entity 였기 때문에 덩달아 service layer 의 코드도 길어졌다.&lt;/p&gt;
&lt;p&gt;이런 redundancy 를 줄이기 위해 ITEM01, ITEM02, &amp;hellip; 대신에 listOfItems 라는 list 로 대체하는 작업을 했다. 그때 유용하게 사용한 것이 ObjectMapper 의 convertValue 함수다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>스프링부트와 환경변수</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/</link>
      <pubDate>Wed, 25 Aug 2021 00:38:47 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/</guid>
      <description>&lt;p&gt;JUnit 을 이용한 테스트에서는 데이터 레이어를 테스트하는 경우가 있다. 이 경우 실제 DB 와 테스트용 DB 를 구분해야 하며, 테스트에서는 테스트용 DB 만 사용해야 한다.&lt;/p&gt;
&lt;h3 id=&#34;activeprofilestest-로-해결-하지만-db-가-모두-삭제된다&#34;&gt;@ActiveProfiles(&amp;ldquo;test&amp;rdquo;) 로 해결? 하지만 DB 가 모두 삭제된다.&lt;/h3&gt;
&lt;p&gt;스프링 부트를 이용하다 보면 JUnit 을 이용해 테스트 코드를 작성하는 경우가 많다.&lt;/p&gt;
&lt;p&gt;테스트 중 integration test 를 하는 경우가 있는데 필자는 아래와 같이 DB 를 생성한 후 삭제한다.&lt;/p&gt;
&lt;p&gt;DbDestinationTest&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@BeforeAll&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;initialDataInput&lt;/span&gt;() = run {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Repository1.saveAll(listOfEntities)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Unit
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;@AfterAll&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;clearData&lt;/span&gt;() = run {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Repository1.deleteAll()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;테스트용 DB 와 실제 DB destination 이 모두 달라야 한다. 그렇지 않으면 clearData() 메서드가 모든 DB 데이터를 삭제한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin Collection</title>
      <link>https://Scoobi-wisdoom.github.io/posts/kotlin-collection-associateby-%EC%99%80-groupby/</link>
      <pubDate>Sun, 15 Aug 2021 19:11:54 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/kotlin-collection-associateby-%EC%99%80-groupby/</guid>
      <description>&lt;h1 id=&#34;kotlin-collection---associateby-와-groupby&#34;&gt;Kotlin Collection - associateBy 와 groupBy&lt;/h1&gt;
&lt;h2 id=&#34;1-kotlin-docs&#34;&gt;1. Kotlin Docs&lt;/h2&gt;
&lt;p&gt;associateBy 와 groupBy 의 코드를 비교해보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-kotlin&#34; data-lang=&#34;kotlin&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;K&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Iterable&lt;/span&gt;&amp;lt;T&amp;gt;.associateBy(keySelector: (T) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; K): Map&amp;lt;K, T&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;val&lt;/span&gt; capacity = mapCapacity(collectionSizeOrDefault(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;)).coerceAtLeast(&lt;span style=&#34;color:#ae81ff&#34;&gt;16&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; associateByTo(LinkedHashMap&amp;lt;K, T&amp;gt;(capacity), keySelector)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;inline&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;fun&lt;/span&gt; &amp;lt;&lt;span style=&#34;color:#a6e22e&#34;&gt;T&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;K&lt;/span&gt;&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Iterable&lt;/span&gt;&amp;lt;T&amp;gt;.groupBy(keySelector: (T) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; K): Map&amp;lt;K, List&amp;lt;T&amp;gt;&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; groupByTo(LinkedHashMap&amp;lt;K, MutableList&amp;lt;T&amp;gt;&amp;gt;(), keySelector)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;두 함수의 공통점은, Map 을 반환한다는 것이다. 차이점은, associateBy 는 T 를 value 로 반환하는 반면, groupBy 는 List&lt;!-- raw HTML omitted --&gt; 를 value 로 반환한다는 것이다. 즉, associateBy 는 Iterable&lt;!-- raw HTML omitted --&gt; 에서 T 가 unique 하다고 가정하는 반면, groupBy 는 duplicates 가 있다고 가정하고 있다. 아래 예제를 살펴보자.&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS Ec2 Docker 에 Domain 연결</title>
      <link>https://Scoobi-wisdoom.github.io/posts/aws-ec2-docker-%EC%97%90-domain-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Thu, 08 Apr 2021 22:35:45 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/aws-ec2-docker-%EC%97%90-domain-%EC%97%B0%EA%B2%B0/</guid>
      <description>&lt;h3 id=&#34;사전-준비-사항&#34;&gt;사전 준비 사항&lt;/h3&gt;
&lt;p&gt;EC2 instance 생성 완료, domain 보유 완료.&lt;/p&gt;
&lt;h3 id=&#34;주의-사항&#34;&gt;주의 사항&lt;/h3&gt;
&lt;p&gt;EC2 를 stop 했다가 run 하면 두 가지를 신경써야 한다. 첫째로 IPv4 address 와 IPv4 DNS 이 모두 변경된다. 그렇기 때문에 Putty 에 주소 입력을 새롭게 해줘야 한다. 둘째로, Docker 가 inactive 가 된다. 결국 Putty 에서 다시 Docker run 을 실행해야 한다. &lt;a href=&#34;https://Scoobi-wisdoom.github.io/posts/docker%EC%99%80-aws-ec2/&#34;&gt;링크의 6. AWS EC2 에서 Docker 사용 부터 살펴보자.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;aws-ec2-instance-에-domain-을-부여하자&#34;&gt;AWS EC2 instance 에 domain 을 부여하자.&lt;/h3&gt;
&lt;p&gt;AWS 홈페이지에서 로그인 한 후에 Dashboard 에서 Compute &amp;gt; EC2 에 접속한다. 사용할 instance 가 running 상태인지 확인하자. Instance 가 running 상태가 아니면 &lt;strong&gt;Public IPv4 address&lt;/strong&gt; 가 없다. &lt;strong&gt;Public IPv4 address&lt;/strong&gt; 를 복사한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Node 입문 및 배포 (Docker 와 Aws)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/node-%EC%9E%85%EB%AC%B8-%EB%B0%8F-%EB%B0%B0%ED%8F%AC-docker-%EC%99%80-aws/</link>
      <pubDate>Tue, 06 Apr 2021 23:36:09 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/node-%EC%9E%85%EB%AC%B8-%EB%B0%8F-%EB%B0%B0%ED%8F%AC-docker-%EC%99%80-aws/</guid>
      <description>&lt;h2 id=&#34;nodejs-expressjs-와-docker&#34;&gt;NodeJS, ExpressJS 와 Docker&lt;/h2&gt;
&lt;h3 id=&#34;nodejs-앱-만들기&#34;&gt;nodeJS 앱 만들기&lt;/h3&gt;
&lt;p&gt;프로젝트 폴더를 생성한 후에 폴더 안에 app.js 를 만든다. 아래와 같은 코드로 작성하며, hello world 를 출력하는 간단한 웹 앱이다.&lt;br&gt;
&lt;strong&gt;app.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;require&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;express&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;express&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;, (&lt;span style=&#34;color:#a6e22e&#34;&gt;req&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;) =&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;res&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;send&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;app&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;listen&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;80&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a6e22e&#34;&gt;console&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;My REST API running on port 80!&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Express 를 &lt;strong&gt;app.js&lt;/strong&gt; 에서 사용하기 때문에 terminal 에 다음과 같은 명령어를 입력하여 express 를 설치한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;npm install express
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 &lt;strong&gt;package.json&lt;/strong&gt; 의 &lt;strong&gt;script&lt;/strong&gt; 에 start command 를 추가한다. 이는 &lt;strong&gt;app.js&lt;/strong&gt; 를 run 하기 위해서다.&lt;br&gt;
&lt;strong&gt;package.json&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Docker와 AWS (EC2)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/docker%EC%99%80-aws-ec2/</link>
      <pubDate>Sun, 29 Nov 2020 21:54:44 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/docker%EC%99%80-aws-ec2/</guid>
      <description>&lt;blockquote&gt;
&lt;h3 id=&#34;목차&#34;&gt;목차&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Docker 설치하기&lt;/li&gt;
&lt;li&gt;예제를 통한 Dockerfile, image 생성&lt;/li&gt;
&lt;li&gt;Docker Hub 에 Docker Image 등록&lt;/li&gt;
&lt;li&gt;AWS EC2 에서 instance 생성&lt;/li&gt;
&lt;li&gt;AWS EC2 접속&lt;/li&gt;
&lt;li&gt;AWS EC2 에서 Docker 사용&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-docker-설치하기&#34;&gt;1. Docker 설치하기&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.docker.com/products/docker-desktop&#34;&gt;Docker 공식홈페이지에서 Docker desktop 을 찾는다.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;여기서 OS 에 맞는 Docker를 다운받는다. Stable 버전으로 받자. 나는 windows 버전으로 받았다. Default 로 설치한다.&lt;/p&gt;
&lt;p&gt;나의 경우 Linux를 설치하지 않았기 때문에 docker 를 실행할 수 없었다. 이 경우 &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/wsl2-kernel&#34;&gt;WSL 2 Linux 커널 업데이트&lt;/a&gt;를 하면 해결된다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugo로 블로그 만들기 2</title>
      <link>https://Scoobi-wisdoom.github.io/posts/hugo%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</link>
      <pubDate>Thu, 26 Nov 2020 16:54:58 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/hugo%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</guid>
      <description>&lt;p&gt;이제 로컬에서 작성한 글을 Hugo 를 이용해 git blog 에 업로드하는 방법을 알아보자.&lt;/p&gt;
&lt;p&gt;이 글에서 설명한 것을 실행하기 전에, 반드시 이 글 맨 아래에 있는 Reference 의 두 번째를 참조하여 두 개의 repository 를 만들고 submodule 처리를 해야 한다.&lt;/p&gt;
&lt;p&gt;먼저 프로젝트 폴더로 cmd 에서 이동한다. 그 다음에 hugo new 명령어를 이용해 작성할 글 파일을 생성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new posts/Hugo로-블로그-만들기-2.md
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이제 이 파일을 열어 글을 작성한다. 작성 완료 후 배포하기 전에 localhost 에서 미리보기를 한다. cmd 에서 아래와 같은 명령어를 입력한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Aws에서 domain 생성</title>
      <link>https://Scoobi-wisdoom.github.io/posts/aws%EC%97%90%EC%84%9C-domain-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Fri, 16 Oct 2020 22:59:42 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/aws%EC%97%90%EC%84%9C-domain-%EC%83%9D%EC%84%B1/</guid>
      <description>&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;
&lt;p&gt;aws에 가입한다. 이때 1달러가 계좌에서 출금된다. 이는 계좌가 유효한지를 검사하는 수단으로, 추후에 환불이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;aws에서 로그인을 한 후에 Route 53에 들어간다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Route 53 Dashboard 메뉴에서 Domain Registration 을 클릭한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;원하는 domain을 입력한 후에 continue를 누른다. 참고로 domain registration 이 만료되기 전에 연장이 가능하니, 걱정하지 말자.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Privacy Protection 은 사생활 보호를 위해서 웬만하면 체크를 하자.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zNZOgZvMGUA&amp;amp;t=88s&#34;&gt;How to register a domain with Route 53 | Amazon Web Services | AWS, deeplizard Youtube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Hugo로 블로그 만들기 1</title>
      <link>https://Scoobi-wisdoom.github.io/posts/hugo1/</link>
      <pubDate>Tue, 28 Jul 2020 20:55:35 +0900</pubDate>
      <guid>https://Scoobi-wisdoom.github.io/posts/hugo1/</guid>
      <description>&lt;p&gt;hugo로 웹사이트를 만들기 위해 씨름 중이다.
아직은 &lt;a href=&#34;https://gohugo.io/getting-started/quick-start/&#34;&gt;hugo 홈페이지의 QuickStart&lt;/a&gt;를 따라하는 중인데, 처음부터 오류가 걸려서 고생했다.&lt;/p&gt;
&lt;p&gt;문제는 아래의 단계에서 발생했다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;echo &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; config.toml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Hugo 공식 홈페이지를 그대로 따라하는데도 아래와 같은 오류가 발생한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;config.toml:4:1&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;: unmarshal failed:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;해결방법은 간단하다. config.toml 파일을 열자. 열면 아래와 같이 나올 것이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;theme = &amp;#34;kiera&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이를 아래와 같이 수정하자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;theme &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;kiera&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러면 오류가 발생하지 않을 것이다. 신나게 QuickStart의 다음 단계를 진행하면 된다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>wisdoom</title>
    <link>https://Scoobi-wisdoom.github.io/</link>
    <description>Recent content on wisdoom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Sep 2023 00:41:11 +0900</lastBuildDate><atom:link href="https://Scoobi-wisdoom.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Kotlin Coroutines</title>
      <link>https://Scoobi-wisdoom.github.io/posts/kotlin-coroutines/</link>
      <pubDate>Tue, 26 Sep 2023 00:41:11 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/kotlin-coroutines/</guid>
      <description>왜 coroutine 을 사용해야 할까? Kotlin coroutine 은 효율적으로 thread 를 사용하고, 프로그래머가 편하고, 퍼포먼스가 좋다.
효율적으로 thread 를 사용한다 Thread 를 생성하는 데에는 큰 비용이 든다. 그런데 Coroutine 를 사용하기 위해 추가적인 thread 생성이 필요 없다.
또한 coroutine 은 non-blocking 이다. 즉, coroutine 이 완료될 때까지 thread 가 멈춰있지 않고 다른 작업을 처리할 수 있다. 아래 예시를 보자.
fun showOrderInfo(details: Details) = async { val orderId = orderProduct(details).await() val orderData = loadOrderData(orderId).</description>
    </item>
    
    <item>
      <title>JPA: 단뱡향 @ManyToOne만 써라</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jpa-direction-of-onetomany/</link>
      <pubDate>Sun, 19 Mar 2023 21:29:21 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/jpa-direction-of-onetomany/</guid>
      <description>자극적인 제목 미안하다. 물론 장단점이 있을 수 있다. 하지만 글의 결론부터 말하자면, 단방향 (unidirectional) @OneToMany보다는 양방향 (bidirectional) @OneToMany가 좋고, 양방향 @OneToMany보다는 단방향 @ManyToOne이 좋다.
@OneToMany를 사용한다면 무조건 양방향이 좋다. Spring Boot Persistence Best Practices 책의 저자는 @OneToMany가 단방향으로 설정됐을 때 얼마나 안 좋은지를 서술한다.
JPA 에서 엔티티 관계를 양방향으로 설정할 경우 귀찮은 일이 생긴다. 그렇기 때문에 단방향으로 설정하는 경우가 있다.
하지만 @OneToMany는 단방향을 선택하면 안 된다. 비효율적인 쿼리가 발생하기 때문이다. 여기서는 실험을 통해 이를 확인한다.</description>
    </item>
    
    <item>
      <title>특정 커밋만 제외하고 모두 git merge</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%ED%8A%B9%EC%A0%95-%EC%BB%A4%EB%B0%8B%EB%A7%8C-%EC%A0%9C%EC%99%B8%ED%95%98%EA%B3%A0-%EB%AA%A8%EB%91%90-git-merge/</link>
      <pubDate>Sun, 04 Dec 2022 22:59:12 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/%ED%8A%B9%EC%A0%95-%EC%BB%A4%EB%B0%8B%EB%A7%8C-%EC%A0%9C%EC%99%B8%ED%95%98%EA%B3%A0-%EB%AA%A8%EB%91%90-git-merge/</guid>
      <description>Develop 브랜치의 여러 개의 커밋 중 특정 커밋만 제외하고 나머지를 모두 master 브랜치에 merge하는 방법이 없을까?
상황 먼저 이런 상황은 어떤 때 발생할까? 실제로 겪은 상황으로, 세부 사항은 아래와 같다.
Develop 브랜치의 총 다섯 개 커밋 중 두 번째, 세 번째 커밋만 테스트가 완료되지 않았다. 나머지 커밋은 당장 master에 merge 후 deploy해야 한다. 언제든 테스트가 완료되면, 두 번째 및 세 번째 커밋도 master에 merge해야 한다. 해결 방법: cherry pick Develop 브랜치의 commit log는 아래와 같다.</description>
    </item>
    
    <item>
      <title>Hibernate가 무슨 쿼리를 만드는지 눈으로 확인하지 말자</title>
      <link>https://Scoobi-wisdoom.github.io/posts/hibernate%EA%B0%80-%EB%AC%B4%EC%8A%A8-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94%EC%A7%80-%EB%88%88%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90/</link>
      <pubDate>Wed, 31 Aug 2022 00:11:17 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/hibernate%EA%B0%80-%EB%AC%B4%EC%8A%A8-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94%EC%A7%80-%EB%88%88%EC%9C%BC%EB%A1%9C-%ED%99%95%EC%9D%B8%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90/</guid>
      <description>JPA hibernate는 편리하지만 때로 치명적이다. 의도하지 않은 여러 쿼리가 실행돼 db에 부하가 걸리거나, 영속성 컨텍스트와 실제 db 데이터가 다를 수 있는 등의 문제가 발생할 수 있기 때문이다. 여기서는 첫 번째 문제를 보완할 수 있는 방법을 소개한다.
Hibernate가 어떤 쿼리를 생성하는지 보통은 눈으로 확인한다. 아래와 같은 로그를 보고 말이다.
[ Test worker] org.hibernate.SQL : select book0_.id as id1_0_0_ from book book0_ where book0_.id=? [ Test worker] o.h.type.descriptor.sql.BasicBinder : binding parameter [1] as [BIGINT] - [0] 로그를 눈으로 보면 select 쿼리가 한 번 발생하는 것을 확인할 수 있다.</description>
    </item>
    
    <item>
      <title>Interface vs Abstract Class</title>
      <link>https://Scoobi-wisdoom.github.io/posts/interface-vs-abstract-class/</link>
      <pubDate>Sun, 07 Aug 2022 16:44:53 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/interface-vs-abstract-class/</guid>
      <description>Interface와 abstract class의 차이를 알아보자.
Java 8부터 interface에는 default method가 생겼다. 이로 인해 interface와 abstract class의 차이가 하나 줄었다.
Interface와 abstract class의 차이는 크게 두 가지다.
Abstract class는 interface와 달리 다중 상속의 대상이 될 수 없다. Abstract class는 state를 가질 수 있지만 interface는 state를 가질 수 없다. 이외에도 lambda expression과 관련한 차이도 있다. 하지만 여기서는 다루지 않는다. 위에 명시한 두 가지 차이에 대해서 알아보자.
다중 상속 Effective Java를 보면 abstract class보다는 interface를 사용하라고 한다.</description>
    </item>
    
    <item>
      <title>Garbage Collection</title>
      <link>https://Scoobi-wisdoom.github.io/posts/garbage-collection/</link>
      <pubDate>Sun, 10 Jul 2022 21:57:35 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/garbage-collection/</guid>
      <description>자바 메모리 관리에 대해 알아보자.
메모리 관리란 새로운 object를 메모리에 할당하고, 오래된 object를 메모리에서 제거하는 과정을 말한다.
Garbage Collection Garbage Collection이란 objects를 할당하기 위해 heap 또는 nursery 공간을 확보하는 과정을 말한다. Java에서는 사용자가 직접 메모리를 통제하는 게 아니라 JVM의 Garbage Collector가 한다. 물론 예외적으로 Reference variable에 null을 할당하거나, System.gc() 메서드를 호출하는 방법이 있다. 후자는 시스템 성능에 예기치 못한 영향을 미칠 수 있으니 사용하면 안 된다.
Java objects는 heap에 위치한다. Heap이 생성되는 시점은 JVM이 시작될 때이며, heap의 사이즈는 애플리케이션이 구동하면서 증감한다.</description>
    </item>
    
    <item>
      <title>백엔드 프레임워크와 UTF Encoding</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%99%80-utf-encoding/</link>
      <pubDate>Tue, 07 Jun 2022 00:19:22 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/%EB%B0%B1%EC%97%94%EB%93%9C-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EC%99%80-utf-encoding/</guid>
      <description>백엔드 프레임워크 만들기 (개정판), 제로 - 인프런 에서 배운 내용을 정리한다. 컴퓨터를 사용하다 보면 아래와 같이 알 수 없는 문자를 본 적이 한 번쯤은 있다. 한글이 깨졌다.
궢귛귍귪궻귺긏긘깈깛 이런 난감한 상황을 막으려면 character set 기준을 정해야 한다.
Character set: 사람의 문자 문자열을 컴퓨터의 문자 비트열로 저장하기 위한 규칙.
Encoding: 문자열과 비트열간 변환 작업.
Decoding: Encoding된 대상을 원본으로 되돌리는 작업을 의미한다.
Character set에 맞춰 어떻게 encoding/decoding 할지 결정한다.
character set에 맞지 않게 인코딩되면 데이터를 해석할 수 없다.</description>
    </item>
    
    <item>
      <title>네트워크 상식</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%81%EC%8B%9D/</link>
      <pubDate>Mon, 23 May 2022 22:48:14 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC-%EC%83%81%EC%8B%9D/</guid>
      <description>개발자에게 필요한 네트워크 상식 백엔드 프레임워크 만들기 (개정판), 제로 - 인프런 에서 배운 내용을 정리한다.
개발자라면 다음과 같은 문제에 대답할 수 있어야 한다.
private IP 주소를 사용하는 외부 서버에 접속할 수 있는 방법 웹 브라우저의 MAC 주소를 알 수 있는 방법 IP 주소를 사용자 식별자로 사용할 수 있는 방법 80 포트를 사용하는 톰캣을 여러 개 실행할 수 있는 방법
나는 첫 두 개는 모르고 있었다. 갈 길이 멀다.
private IP 주소를 사용하는 외부 서버에 접속할 수 있는 방법: public IP 주소를 할당받아야 함.</description>
    </item>
    
    <item>
      <title>Abstract Class</title>
      <link>https://Scoobi-wisdoom.github.io/posts/abstract-class/</link>
      <pubDate>Wed, 16 Mar 2022 00:16:44 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/abstract-class/</guid>
      <description>Spring 은 IoC container 에 bean 객체를 생성한 후 그 객체를 등록한 후, 필요할 때 사용한다. Interface 는 객체를 생성할 수 없기 때문에 bean 이 될 수 없다.
그렇다면 Abstract Class 는 어떨까? 아래 코드를 보면 일단 bean 으로 등록할 수 없다.
@RestController class Controller( val abstractService: AbstractService, ) { @GetMapping(&amp;#34;/abstract&amp;#34;) fun getAbstract() = abstractService.abstractFunction() } @Service abstract class AbstractService { fun abstractFunction() = &amp;#34;&amp;#34; } 아래와 같은 메시지가 뜨면서 애플리케이션이 멈춘다.</description>
    </item>
    
    <item>
      <title>Jackson Mapper 는 가끔 위험하다</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jackson-mapper-%EB%8A%94-%EA%B0%80%EB%81%94-%EC%9C%84%ED%97%98%ED%95%98%EB%8B%A4/</link>
      <pubDate>Wed, 27 Oct 2021 22:51:13 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/jackson-mapper-%EB%8A%94-%EA%B0%80%EB%81%94-%EC%9C%84%ED%97%98%ED%95%98%EB%8B%A4/</guid>
      <description>null 로 설정된 값을 Jackson mapper 가 멋대로 변경하는 현상: Java Primitives Kotlin 스프링 부트를 사용해 API 를 작성 중에 예상치 못한 에러를 경험했다.
아래의 RequestBody class 를 보면 알 수 있듯이 blocked 는 not nullable 이다.
RequestBody data class
data class ReqBody( val demoId: String, val demoName: String, val openDate: LocalDate?, val blocked: Boolean ) json 으로 request 를 보낼 때, 아래와 같이 보내면 어떻게 될까?
json 형태의 request</description>
    </item>
    
    <item>
      <title>Jpa 정리 Ch9 (2)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-2/</link>
      <pubDate>Tue, 12 Oct 2021 01:27:12 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-2/</guid>
      <description>무슨 이유에서인지 QueryDSL 의 쿼리 결과를 list() 로도, unique() 로도 반환할 수 없다. 원인을 파악해야 한다.
QueryDSL QueryDSL 환경 설정을 위해 build.gradle.kts 파일에 설정을 추가한다. 추가하는 설정은 이 글 맨 아래에서 확인할 수 있다.
설정 파일 persistence.xml
&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt; &amp;lt;!-- xml 네임스페이스와 사용할 버전을 지정한다. --&amp;gt; &amp;lt;!-- jpa 2.1 을 사용하려면 여기에 xmlns 와 2.1 을 쓰면 된다. --&amp;gt; &amp;lt;persistence xmlns=&amp;#34;http://xmlns.jcp.org/xml/ns/persistence&amp;#34; version=&amp;#34;2.2&amp;#34;&amp;gt; &amp;lt;!-- 영속성 유닛. 일반적으로 연결할 데이터베이스당 하나의 영속성 유닛을 등록한다.</description>
    </item>
    
    <item>
      <title>Jpa 정리 Ch9 (1)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-1/</link>
      <pubDate>Mon, 27 Sep 2021 22:15:56 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/jpa-%EC%A0%95%EB%A6%AC-ch9-1/</guid>
      <description>의문점:
JPQL 의 여러 값 projection 을 할 때, [Ljava.lang.Object 로 resultList 가 보이는데, 이걸 사람이 알아볼 수 있게 만드는 방법이 없을까? DTO 를 만들어서 TypedQuery&amp;lt;DTO&amp;gt; 로 해결하는 것으로 보인다. 이 글은 책(김영한, 자바 orm 표준 jpa 프로그래밍, 에이콘, 2019) 의 내용을 정리한 것임을 밝힌다.
값 타입 JPA 의 데이터 타입은 엔티티 타입과 값 타입으로 나뉜다. 엔티티 타입의 객체는 @Entity 로 정의되는 객체로 JPA 에서 식별자와 생명주기를 가져 영속성 컨텍스트에서 관리되지만, 값 타입은 state로서 실별자도 생명주기도 없는 것으로서 기본값 타입(basic value type), 임베디드 타입(embedded type), 컬렉션 값 타입(collection value type) 으로 나뉜다.</description>
    </item>
    
    <item>
      <title>클래스의 프로퍼티를 Map으로 변환하기</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-map%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 13 Sep 2021 23:27:26 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0%EB%A5%BC-map%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EA%B8%B0/</guid>
      <description>코틀린 class 의 properties 개수가 많고, 이의 fields 가 반복되는 규칙의 이름을 가진 경우, objectMapper 를 통해 쉽게 값을 사용할 수 있다.
어떤 경우에 이런 기능이 필요할까? 필자가 개발하다 보니, 인수인계 받은 코드의 item class 의 프로퍼티가 매우 많았다. item01 ~ item35 까지 있었다. 이렇게 되면 한 눈에 클래스를 파악하기도 힘들었다. 설상가상으로, item class 는 entity 였기 때문에 덩달아 service layer 의 코드도 길어졌다.
이런 redundancy 를 줄이기 위해 ITEM01, ITEM02, &amp;hellip; 대신에 listOfItems 라는 list 로 대체하는 작업을 했다.</description>
    </item>
    
    <item>
      <title>스프링부트와 환경변수</title>
      <link>https://Scoobi-wisdoom.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/</link>
      <pubDate>Wed, 25 Aug 2021 00:38:47 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/%EC%8A%A4%ED%94%84%EB%A7%81%EB%B6%80%ED%8A%B8%EC%99%80-%ED%99%98%EA%B2%BD%EB%B3%80%EC%88%98/</guid>
      <description>JUnit 을 이용한 테스트에서는 데이터 레이어를 테스트하는 경우가 있다. 이 경우 실제 DB 와 테스트용 DB 를 구분해야 하며, 테스트에서는 테스트용 DB 만 사용해야 한다.
@ActiveProfiles(&amp;ldquo;test&amp;rdquo;) 로 해결? 하지만 DB 가 모두 삭제된다. 스프링 부트를 이용하다 보면 JUnit 을 이용해 테스트 코드를 작성하는 경우가 많다.
테스트 중 integration test 를 하는 경우가 있는데 필자는 아래와 같이 DB 를 생성한 후 삭제한다.
DbDestinationTest
@BeforeAll fun initialDataInput() = run { Repository1.saveAll(listOfEntities) Unit } @AfterAll fun clearData() = run { Repository1.</description>
    </item>
    
    <item>
      <title>Kotlin Collection</title>
      <link>https://Scoobi-wisdoom.github.io/posts/kotlin-collection-associateby-%EC%99%80-groupby/</link>
      <pubDate>Sun, 15 Aug 2021 19:11:54 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/kotlin-collection-associateby-%EC%99%80-groupby/</guid>
      <description>Kotlin Collection - associateBy 와 groupBy 1. Kotlin Docs associateBy 와 groupBy 의 코드를 비교해보자.
public inline fun &amp;lt;T, K&amp;gt; Iterable&amp;lt;T&amp;gt;.associateBy(keySelector: (T) -&amp;gt; K): Map&amp;lt;K, T&amp;gt; { val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16) return associateByTo(LinkedHashMap&amp;lt;K, T&amp;gt;(capacity), keySelector) } public inline fun &amp;lt;T, K&amp;gt; Iterable&amp;lt;T&amp;gt;.groupBy(keySelector: (T) -&amp;gt; K): Map&amp;lt;K, List&amp;lt;T&amp;gt;&amp;gt; { return groupByTo(LinkedHashMap&amp;lt;K, MutableList&amp;lt;T&amp;gt;&amp;gt;(), keySelector) } 두 함수의 공통점은, Map 을 반환한다는 것이다. 차이점은, associateBy 는 T 를 value 로 반환하는 반면, groupBy 는 List 를 value 로 반환한다는 것이다.</description>
    </item>
    
    <item>
      <title>AWS Ec2 Docker 에 Domain 연결</title>
      <link>https://Scoobi-wisdoom.github.io/posts/aws-ec2-docker-%EC%97%90-domain-%EC%97%B0%EA%B2%B0/</link>
      <pubDate>Thu, 08 Apr 2021 22:35:45 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/aws-ec2-docker-%EC%97%90-domain-%EC%97%B0%EA%B2%B0/</guid>
      <description>사전 준비 사항 EC2 instance 생성 완료, domain 보유 완료.
주의 사항 EC2 를 stop 했다가 run 하면 두 가지를 신경써야 한다. 첫째로 IPv4 address 와 IPv4 DNS 이 모두 변경된다. 그렇기 때문에 Putty 에 주소 입력을 새롭게 해줘야 한다. 둘째로, Docker 가 inactive 가 된다. 결국 Putty 에서 다시 Docker run 을 실행해야 한다. 링크의 6. AWS EC2 에서 Docker 사용 부터 살펴보자.
AWS EC2 instance 에 domain 을 부여하자.</description>
    </item>
    
    <item>
      <title>Node 입문 및 배포 (Docker 와 Aws)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/node-%EC%9E%85%EB%AC%B8-%EB%B0%8F-%EB%B0%B0%ED%8F%AC-docker-%EC%99%80-aws/</link>
      <pubDate>Tue, 06 Apr 2021 23:36:09 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/node-%EC%9E%85%EB%AC%B8-%EB%B0%8F-%EB%B0%B0%ED%8F%AC-docker-%EC%99%80-aws/</guid>
      <description>NodeJS, ExpressJS 와 Docker nodeJS 앱 만들기 프로젝트 폴더를 생성한 후에 폴더 안에 app.js 를 만든다. 아래와 같은 코드로 작성하며, hello world 를 출력하는 간단한 웹 앱이다.
app.js
const express = require(&amp;#39;express&amp;#39;); const app = express(); app.get(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; res.send(&amp;#39;hello world&amp;#39;)); app.listen(80, () =&amp;gt; { console.log(&amp;#39;My REST API running on port 80!&amp;#39;); }); Express 를 app.js 에서 사용하기 때문에 terminal 에 다음과 같은 명령어를 입력하여 express 를 설치한다.
npm install express 이제 package.</description>
    </item>
    
    <item>
      <title>Spring으로 게시판 만들기: 기본</title>
      <link>https://Scoobi-wisdoom.github.io/posts/web-with-spring/</link>
      <pubDate>Tue, 15 Dec 2020 16:23:22 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/web-with-spring/</guid>
      <description>먼저 여기서 서술된 java project 코드는 Webjjang 무조건 Spring , 웹짱이영환쌤 - YouTube 을 가공한 것임을 밝힌다.
1. Project 생성 및 서버 구동 - pom.xml, ojdbc, 사용자 정의 파일 Spring Legacy Project 를 생성할 때 Spring MVC Project 를 선택한다. Project 가 생성이 된 후에는 pom.xml 파일을 설정한다. 필자는 웹짱매니아에서 제공한 pom.xml 파일을 수정해 사용했다. pom.xml 은 코드가 길기 때문에 글 맨 아래에 두었다. 복사 붙여넣기 할 때는 version 태그 아래부터 하자.</description>
    </item>
    
    <item>
      <title>Docker와 AWS (EC2)</title>
      <link>https://Scoobi-wisdoom.github.io/posts/docker%EC%99%80-aws-ec2/</link>
      <pubDate>Sun, 29 Nov 2020 21:54:44 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/docker%EC%99%80-aws-ec2/</guid>
      <description>목차 Docker 설치하기 예제를 통한 Dockerfile, image 생성 Docker Hub 에 Docker Image 등록 AWS EC2 에서 instance 생성 AWS EC2 접속 AWS EC2 에서 Docker 사용 1. Docker 설치하기 Docker 공식홈페이지에서 Docker desktop 을 찾는다.
여기서 OS 에 맞는 Docker를 다운받는다. Stable 버전으로 받자. 나는 windows 버전으로 받았다. Default 로 설치한다.
나의 경우 Linux를 설치하지 않았기 때문에 docker 를 실행할 수 없었다. 이 경우 WSL 2 Linux 커널 업데이트를 하면 해결된다.</description>
    </item>
    
    <item>
      <title>Hugo로 블로그 만들기 2</title>
      <link>https://Scoobi-wisdoom.github.io/posts/hugo%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</link>
      <pubDate>Thu, 26 Nov 2020 16:54:58 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/hugo%EB%A1%9C-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</guid>
      <description>이제 로컬에서 작성한 글을 Hugo 를 이용해 git blog 에 업로드하는 방법을 알아보자.
이 글에서 설명한 것을 실행하기 전에, 반드시 이 글 맨 아래에 있는 Reference 의 두 번째를 참조하여 두 개의 repository 를 만들고 submodule 처리를 해야 한다.
먼저 프로젝트 폴더로 cmd 에서 이동한다. 그 다음에 hugo new 명령어를 이용해 작성할 글 파일을 생성한다.
hugo new posts/Hugo로-블로그-만들기-2.md 이제 이 파일을 열어 글을 작성한다. 작성 완료 후 배포하기 전에 localhost 에서 미리보기를 한다.</description>
    </item>
    
    <item>
      <title>Aws에서 domain 생성</title>
      <link>https://Scoobi-wisdoom.github.io/posts/aws%EC%97%90%EC%84%9C-domain-%EC%83%9D%EC%84%B1/</link>
      <pubDate>Fri, 16 Oct 2020 22:59:42 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/aws%EC%97%90%EC%84%9C-domain-%EC%83%9D%EC%84%B1/</guid>
      <description> aws에 가입한다. 이때 1달러가 계좌에서 출금된다. 이는 계좌가 유효한지를 검사하는 수단으로, 추후에 환불이 된다.
aws에서 로그인을 한 후에 Route 53에 들어간다.
Route 53 Dashboard 메뉴에서 Domain Registration 을 클릭한다.
원하는 domain을 입력한 후에 continue를 누른다. 참고로 domain registration 이 만료되기 전에 연장이 가능하니, 걱정하지 말자.
Privacy Protection 은 사생활 보호를 위해서 웬만하면 체크를 하자.
Reference How to register a domain with Route 53 | Amazon Web Services | AWS, deeplizard Youtube </description>
    </item>
    
    <item>
      <title>Throw와 throws</title>
      <link>https://Scoobi-wisdoom.github.io/posts/throw%EC%99%80-throws/</link>
      <pubDate>Wed, 05 Aug 2020 23:03:44 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/throw%EC%99%80-throws/</guid>
      <description>Java에 Exception을 처리하는 방법이 있다. 이 중 throw와 throws가 헷갈려서 차이점을 정리하고자 한다.
1. 기능 Throw는 exception을 발생시키는 데 사용되고, Throws는 method 내에서 발생할 수 있는 exceptions를 선언하는 역할을 한다.
또한 throws는 해당 method를 사용하는 다른 Class에서 예외 처리할 의무를 부여한다. 이때 어떤 exception을 처리해야 하는지도 명시하는 역할도 한다.
2. 사용되는 위치 Throw는 method 내부에서 Exception class의 instance varaible 앞에서 사용되고, throws는 method의 선언부(signature) 안의 Exception class 앞에서 사용된다.
// 1.</description>
    </item>
    
    <item>
      <title>ORACLE SQL 중요 기능</title>
      <link>https://Scoobi-wisdoom.github.io/posts/oracle-sql-%EC%A4%91%EC%9A%94-%EA%B8%B0%EB%8A%A5/</link>
      <pubDate>Tue, 04 Aug 2020 23:41:35 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/oracle-sql-%EC%A4%91%EC%9A%94-%EA%B8%B0%EB%8A%A5/</guid>
      <description>Oracle SQL에서 중요한 기능들에 대해 알아보겠습니다.
1. Sequence 2. Alter 3. Constraint 3-1. Foreign key: Primary key of another 4. Disable &amp;amp; enable 5. Transaction 1. Sequence 아래와 같은 product table이 있다고 하겠습니다.
CREATE TABLE PRODUCT ( ID NUMBER(10), NAME VARCHAR2(20), PRICE NUMBER(10), REGDATE DATE); 이제 아래와 같이 데이터를 입력하겠습니다.
INSERT INTO PRODUCT VALUES (100, &amp;#39;pants&amp;#39;, 15000, SYSDATE); INSERT INTO PRODUCT VALUES (101, &amp;#39;shirts&amp;#39;, 20000, SYSDATE); 이때 첫 번째 column의 변수인 ID는 입력횟수에 비례해서 숫자를 증가시키고 싶을 수 있습니다.</description>
    </item>
    
    <item>
      <title>Java의 Constructor 주의 사항2</title>
      <link>https://Scoobi-wisdoom.github.io/posts/java%EC%9D%98-constructor-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD2/</link>
      <pubDate>Wed, 29 Jul 2020 21:35:45 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/java%EC%9D%98-constructor-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD2/</guid>
      <description>Constructor는 정말 중요하다.
Class App은 java awt를 이용해서 만든 데모 버전의 ui다.
public class App { Db&amp;lt;String, User&amp;gt; userDb; ArrayList&amp;lt;User&amp;gt; ulist; public App() {} public App(Db&amp;lt;String, User&amp;gt; userDb) { this.userDb = userDb; makeUi(); eventProcess(); } public void makeUi() { // UI 생성 } public void eventProcess() { // 이벤트 관리 } public static void main(String[] args) { App app = new App(); } } 필자는 이 class 가 잘 작동하는지 실험하고 싶었다.</description>
    </item>
    
    <item>
      <title>Java의 Constructor 주의 사항</title>
      <link>https://Scoobi-wisdoom.github.io/posts/java%EC%9D%98-constructor-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD/</link>
      <pubDate>Tue, 28 Jul 2020 22:31:33 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/java%EC%9D%98-constructor-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD/</guid>
      <description>고용노동부의 지원을 받아 IT 교육을 받고 있다. 지금은 Java를 배우고 있는데, 코딩을 하다가 constructor에 대해 알게 된 것을 쓴다.
혹자는 constructor는 method가 아니라고 하고, 또 다른 사람들은 constructor는 &amp;lsquo;인스턴스 초기화 메서드&amp;rsquo;라고 한다. 즉 method라고 한다.
constructor가 method가 아니더라도, method와 비슷한 결과를 낼 때가 있다.
public class Login { Frame frame; TextField txtid,txtpwd; Label label; Button btnlogin; Button btnsignup; Db&amp;lt;String, User&amp;gt; userDb; public Login() { // Caution below Db&amp;lt;String, User&amp;gt; userDb = new UserDb(&amp;#34;127.</description>
    </item>
    
    <item>
      <title>Hugo로 블로그 만들기 1</title>
      <link>https://Scoobi-wisdoom.github.io/posts/hugo1/</link>
      <pubDate>Tue, 28 Jul 2020 20:55:35 +0900</pubDate>
      
      <guid>https://Scoobi-wisdoom.github.io/posts/hugo1/</guid>
      <description>hugo로 웹사이트를 만들기 위해 씨름 중이다. 아직은 hugo 홈페이지의 QuickStart를 따라하는 중인데, 처음부터 오류가 걸려서 고생했다.
문제는 아래의 단계에서 발생했다.
echo &amp;#39;theme = &amp;#34;ananke&amp;#34;&amp;#39; &amp;gt;&amp;gt; config.toml Hugo 공식 홈페이지를 그대로 따라하는데도 아래와 같은 오류가 발생한다.
config.toml:4:1&amp;#34;: unmarshal failed: 해결방법은 간단하다. config.toml 파일을 열자. 열면 아래와 같이 나올 것이다.
&amp;#39;theme = &amp;#34;kiera&amp;#34;&amp;#39; 이를 아래와 같이 수정하자.
theme = &amp;#34;kiera&amp;#34; 그러면 오류가 발생하지 않을 것이다. 신나게 QuickStart의 다음 단계를 진행하면 된다.</description>
    </item>
    
  </channel>
</rss>
